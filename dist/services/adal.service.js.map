{"version":3,"sources":["../src/services/adal.service.ts"],"names":[],"mappings":"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","file":"adal.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport * as adalLib from 'adal-angular';\r\nimport { OAuthData } from \"./oauthdata.model\";\r\n\r\n@Injectable()\r\nexport class AdalService {\r\n\r\n    private adalContext: adal.AuthenticationContext;\r\n    private oauthData: OAuthData = {\r\n        isAuthenticated: false,\r\n        userName: '',\r\n        loginError: '',\r\n        profile: {}\r\n    };\r\n\r\n    public init(configOptions: adal.Config) {\r\n        if (!configOptions) {\r\n            throw new Error('You must set config, when calling init.');\r\n        }\r\n\r\n        // redirect and logout_redirect are set to current location by default\r\n        var existingHash = window.location.hash;\r\n        var pathDefault = window.location.href;\r\n        if (existingHash) {\r\n            pathDefault = pathDefault.replace(existingHash, '');\r\n        }\r\n\r\n        configOptions.redirectUri = configOptions.redirectUri || pathDefault;\r\n        configOptions.postLogoutRedirectUri = configOptions.postLogoutRedirectUri || pathDefault;\r\n\r\n        // create instance with given config\r\n        this.adalContext = adalLib.inject(configOptions);\r\n\r\n        window.AuthenticationContext = this.adalContext.constructor;\r\n\r\n        // loginresource is used to set authenticated status\r\n        this.updateDataFromCache(this.adalContext.config.loginResource);\r\n    }\r\n\r\n    public get config(): adal.Config {\r\n        return this.adalContext.config;\r\n    }\r\n\r\n    public get userInfo(): OAuthData {\r\n        return this.oauthData;\r\n    }\r\n\r\n    public login(): void {\r\n        this.adalContext.login();\r\n    }\r\n\r\n    public loginInProgress(): boolean {\r\n        return this.adalContext.loginInProgress();\r\n    }\r\n\r\n    public logOut(): void {\r\n        this.adalContext.logOut();\r\n    }\r\n\r\n    public handleWindowCallback(): void {\r\n        let hash = window.location.hash;\r\n        if (this.adalContext.isCallback(hash)) {\r\n            let requestInfo = this.adalContext.getRequestInfo(hash);\r\n            this.adalContext.saveTokenFromHash(requestInfo);\r\n            if (requestInfo.requestType === this.adalContext.REQUEST_TYPE.LOGIN) {\r\n                this.updateDataFromCache(this.adalContext.config.loginResource);\r\n\r\n            } else if (requestInfo.requestType === this.adalContext.REQUEST_TYPE.RENEW_TOKEN) {\r\n                this.adalContext.callback = window.parent.callBackMappedToRenewStates[requestInfo.stateResponse];\r\n            }\r\n\r\n            if (requestInfo.stateMatch) {\r\n                if (typeof this.adalContext.callback === 'function') {\r\n                    if (requestInfo.requestType === this.adalContext.REQUEST_TYPE.RENEW_TOKEN) {\r\n                        // Idtoken or Accestoken can be renewed\r\n                        if (requestInfo.parameters['access_token']) {\r\n                            this.adalContext.callback(this.adalContext._getItem(this.adalContext.CONSTANTS.STORAGE.ERROR_DESCRIPTION)\r\n                                , requestInfo.parameters['access_token']);\r\n                        }\r\n                        else if (requestInfo.parameters['error']) {\r\n                            this.adalContext.callback(this.adalContext._getItem(this.adalContext.CONSTANTS.STORAGE.ERROR_DESCRIPTION), null);\r\n                            this.adalContext._renewFailed = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getCachedToken(resource: string): string {\r\n        return this.adalContext.getCachedToken(resource);\r\n    }\r\n\r\n    public acquireToken(resource: string) {\r\n        let errorMessage: string;\r\n        return Observable.bindCallback((cb) => {\r\n            this.adalContext.acquireToken(resource, (error: string, tokenOut: string) => {\r\n                if (error) {\r\n                    this.adalContext.error('Error when acquiring token for resource: ' + resource, error);\r\n                    errorMessage = error;\r\n                    cb(null);\r\n                } else {\r\n                    cb(tokenOut);\r\n                }\r\n            });\r\n        }, function (token: string) {\r\n            if (!token && errorMessage)\r\n                throw (errorMessage);\r\n        })();\r\n    }\r\n\r\n    public getUser(): Observable<adal.User> {\r\n        return Observable.bindCallback((cb: (u: adal.User) => adal.User) => {\r\n            this.adalContext.getUser(function (error: string, user: adal.User) {\r\n                if (error) {\r\n                    this.adalContext.error('Error when getting user', error);\r\n                    cb(null);\r\n                } else {\r\n                    cb(user);\r\n                }\r\n            });\r\n        })();\r\n    }\r\n\r\n    public clearCache(): void {\r\n        this.adalContext.clearCache();\r\n    }\r\n\r\n    public clearCacheForResource(resource: string): void {\r\n        this.adalContext.clearCacheForResource(resource);\r\n    }\r\n\r\n    public info(message: string): void {\r\n        this.adalContext.info(message);\r\n    }\r\n\r\n    public verbose(message: string): void {\r\n        this.adalContext.verbose(message);\r\n    }\r\n\r\n    public GetResourceForEndpoint(url: string): string {\r\n        return this.adalContext.getResourceForEndpoint(url);\r\n    }\r\n\r\n    public refreshDataFromCache() { \r\n        this.updateDataFromCache(this.adalContext.config.loginResource); \r\n    }\r\n\r\n    private updateDataFromCache(resource: string): void {\r\n        let token = this.adalContext.getCachedToken(resource);\r\n        this.oauthData.isAuthenticated = token !== null && token.length > 0;\r\n        var user = this.adalContext.getCachedUser() || { userName: '', profile: undefined };\r\n        if (user) {\r\n            this.oauthData.userName = user.userName;\r\n            this.oauthData.profile = user.profile;\r\n            this.oauthData.loginError = this.adalContext.getLoginError();\r\n        }\r\n        else {\r\n            this.oauthData.userName = '';\r\n            this.oauthData.profile = {};\r\n            this.oauthData.loginError = '';\r\n        }\r\n\r\n    };\r\n}\r\n"]}